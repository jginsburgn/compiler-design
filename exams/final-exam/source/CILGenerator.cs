/*
Author:
	Jonathan Ginsburg A01021617
*/

using System;
using System.Text;
using System.Collections.Generic;

namespace Trillian {

	class CILGenerator {

		public CILGenerator() { }

		public string ObtainAssembly(Node ast) {
			return "// Code generated by the trillian compiler.\n\n" 
				+ ".assembly 'trillian' {}\n\n"
				//+ ".assembly extern 'bcuplib' {}\n\n"
				+ ".class public 'TrillianProgram' extends " 
				+ "['mscorlib']'System'.'Object' {\n" 
				+ "\t.method public static void 'start'() {\n" 
				+ "\t\t.entrypoint\n"
				+ Visit((dynamic) ast)
				+ "call void ['mscorlib']'System'.'Console'::'WriteLine'(float64)\n"
				+ "\t\tret\n"
				+ "\t}\n"
				+ "}\n";
		}

		public string Visit(NMax nMax) {
			string retVal = Visit((dynamic) nMax[0]);
			for (int i = 1; i < nMax.children.Count; ++i){
				retVal += Visit((dynamic) nMax[i]);
				retVal += "\t\tcall float64 ['mscorlib']'System'.'Math'::'Max'(float64, float64)\n";
			}
			return retVal;
		}

		public string Visit(NSummation nSummation) {
			string retVal = Visit((dynamic) nSummation[0]);
			for (int i = 1; i < nSummation.children.Count; ++i){
				retVal += Visit((dynamic) nSummation[i]);
				retVal += "\t\tadd\n";
			}
			return retVal;
		}

		public string Visit(NDuplicate nDuplicate) {
			string retVal = Visit((dynamic) nDuplicate[0]);
			retVal += "\t\tdup\n";
			retVal += "\t\tadd\n";
			return retVal;
		}

		public string Visit(NLiteral nLiteral) {
			string retVal = "\t\tldc.r8 " + nLiteral.AnchorToken.Lexeme + "\n";
			return retVal;
		}
	}
}
